import { Production } from "./Production"

/**
 * @description
 *	A recursive descent recognizer.
 */
export default class Recognizer {
	private k: number
	private input: string
	private readonly production: Production

	/**
	 * @description
	 *	Constructs a new recognizer from the specified first production of a
	 *	grammar. The grammar must be non-recursive.
	 */
	public constructor(production: Production) {
		this.k = 0
		this.input = ""
		this.production = production
	}

	/**
	 * @description
	 *	Returns true if the input belongs to the language generated by the
	 *	grammar; false if not.
	 */
	public accepts(input: string): boolean {
		this.input = input
		this.k = 0
		const result = this.production(this)
		return result && this.k == this.input.length
	}

	/**
	 * @description
	 *	Executes a production rule. If fails, backtracks.
	 */
	public rule(rule: string, production: Production): boolean {
		const i = this.k
		if (production(this)) {
			console.debug(rule)
			return true
		}
		this.k = i
		return false
	}

	/**
	 * @description
	 *	Matches a symbol of the input with the next terminal symbol in the
	 *	grammar.
	 */
	public scan(symbol: string): boolean {
		if (symbol === "λ") {
			console.debug(`λ match at k = ${this.k}`)
			return true
		} else if (symbol === this.input[this.k]) {
			console.debug(`${symbol} match at k = ${this.k}`)
			++this.k
			return true
		} else {
			return false
		}
	}
}
